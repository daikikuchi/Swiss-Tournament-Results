#!/usr/bin/env python
# 
# tournament.py -- implementation of a Swiss-system tournament
#

import psycopg2


def connect(db_name="tournament"):
    """Connect to the PostgreSQL database.  Returns a database connection.
        if there is a conection error, except is executed"""
    try:
        db = psycopg2.connect("dbname = {}".format(db_name))
        c = db.cursor()
        return db, c
    except:
        print "There was a connection error"


def deleteMatches():
    """Remove all the match records from the database."""

    conn, c = connect()
    c.execute("DELETE FROM matches")
    conn.commit()
    conn.close()
    return


def deletePlayers():
    """Remove all the player records from the database."""

    conn, c = connect()
    c.execute("DELETE FROM players")
    conn.commit()
    conn.close()
    return


def countPlayers():
    """Returns the number of players currently registered."""
    # Use [0] to get the number of player and return it.

    conn, c = connect()
    query = "SELECT count(players.pid) AS no_of_player FROM players;"
    c.execute(query)
    no_of_player = c.fetchone()[0]
    conn.close()
    return no_of_player


def registerPlayer(name):
    """Adds a player to the tournament database.
  
    The database assigns a unique serial id number for the player.  (This
    should be handled by your SQL database schema, not in your Python code.)
  
    Args:
      name: the player's full name (need not be unique).
    """

    # pid(player id) is automatically generated by db
    # USE %s and tuples to pass value of parameter

    conn, c = connect()
    query = "INSERT INTO players(name) VALUES(%s);"
    c.execute(query, (name,))
    conn.commit()
    conn.close()


def playerStandings():
    """Returns a list of the players and their win records, sorted by wins.

    The first entry in the list should be the player
     in first place, or a player
    tied for first place if there is currently a tie.

    Returns:
      A list of tuples, each of which contains (id, name, wins, matches):
        id: the player's unique id (assigned by the database)
        name: the player's full name (as registered)
        wins: the number of matches the player has won
        matches: the number of matches the player has played
    """
    # Since only a few columns and no other use of this query, no use of view
    # Use subqueries to get total number of wins and matches
    # Join the table of players with the results of subqueries.
    # results contains the data as a lists of tuples.

    conn, c = connect()
    query = "SELECT * FROM playerstandings;"
    c.execute(query)
    results = c.fetchall()
    conn.close()
    return results


def reportMatch(winner, loser):
    """Records the outcome of a single match between two players.

    Args:
      winner:  the id number of the player who won
      loser:  the id number of the player who lost
    """

    conn, c = connect()
    query = "INSERT INTO matches(winner,loser) VALUES(%s,%s)"
    c.execute(query, (winner, loser))
    conn.commit()
    conn.close()
    return


def swissPairings():
    """Returns a list of pairs of players for the next round of a match.
  
    Assuming that there are an even number of players registered, each player
    appears exactly once in the pairings.  Each player is paired with another
    player with an equal or nearly-equal win record, that is, a player adjacent
    to him or her in the standings.
  
    Returns:
      A list of tuples, each of which contains (id1, name1, id2, name2)
        id1: the first player's unique id
        name1: the first player's name
        id2: the second player's unique id
        name2: the second player's name
    """
    pair_list = playerStandings()

    pair_result = []

    if len(pair_list) % 2 == 0:
        for i in range(0, len(pair_list), 2):
            make_pairs = pair_list[i][0], pair_list[i][1], \
                         pair_list[i + 1][0], pair_list[i + 1][1]
            pair_result.append(make_pairs)
    else:
        print "The number of the player is not even"

    """ print out pairing results to check """
    for i in range(0, len(pair_result), 1):
        print pair_result[i]

    return pair_result
